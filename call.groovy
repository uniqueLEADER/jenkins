def call(Map pipelineParams) {
	
    // Set up the node labels. Remember, the logical AND/OR character must be
    // *inside* the string.
    // NOTE: for anyone considering moving these local Groovy definitions to environment
    // variables - don't. As of Q4'18 Jenkins pipeline would exhibit weird behavior
    // when dealing with environment variables used in places of strings like node
    // label and customWorkspace directives.
    //
    // LINUX_BUILD_NODE = "BuildLinux" + " && " + pipelineParams.RELEASE
    // WIN_BUILD_NODE   = "BuildWindows" + " && " + pipelineParams.RELEASE
	WIN_BUILD_NODE   = "BuildWindows"
	LINUX_BUILD_NODE = "BuildLinux"
	WIN_ODT_LOCAL_NODE = "BuildWindows" //replaced "ODT"
    MACOS_BUILD_NODE = "BuildMacOS" + " && " + pipelineParams.RELEASE

    
    // LINUX_SSR_NODE   = "SSRLinux1" + " && " + pipelineParams.RELEASE
	LINUX_SSR_NODE   = "SSRLinux"
    BINARY_REPO_NODE = "BinaryRepo" + " && " + pipelineParams.RELEASE
    DOCKER_NODE      = "Docker" + " && " + pipelineParams.RELEASE
    POOL_CTRL_NODE   = "PoolController" + " && " + pipelineParams.RELEASE
    CODE_CHECK_NODE  = "CodeCheck" + " && " + pipelineParams.RELEASE
    CODE_CHECK_NODE1  = "CodeCheck1" + " && " + pipelineParams.RELEASE
    
    // Global variable that will be used to hold the methods defined in an
    // external Groovy file. This way, we load the file only once using the
    // fileLoader.
    //
    externalFuncs    = ""

    pipeline {

        // DO NOT use the 'any' keyword here. If you do, Jenkins will select a
        // node and run repo clone in order to load this file. This could
        // be either the master node or anything at random it selects from
        // the list of nodes. In addition, using 'agent none' forces each stage
        // section to contain its own agent section.
        //
        // Suggestion: put the build stage first and restrict it to Build
        // nodes, so that repo operations are performed on the nodes used for
        // compilations.
        agent none

        options {
            // Skip checking out code from source control by default in the
            // agent directive.
            skipDefaultCheckout()

            // Disallow concurrent executions of the Pipeline. Can be useful
            // for preventing simultaneous accesses to shared resources, etc.
            //disableConcurrentBuilds()

            // Persist artifacts and console output for the specific number of
            // recent Pipeline runs.
            buildDiscarder(logRotator(numToKeepStr: '100'))

            // Prepend all console output generated by the Pipeline run with
            // the time at which the line was emitted.
            timestamps()
        }

        // Variables used in the pipeline need to be defined in this section
        //
        environment {

            // If we ever decide to rename the Tools repository. The URL
            // though is definitely used throughout so it has to stay as
            // a variable.
            //
            
        }


        stages {
            // This stage is to load the envlocal.groovy file for each location
            // specific details like the location of tools, diffusion, etc.
            // Since we need to do this only once, might as well do it on the
            // master node.
            // NOTE: the environment variables defined in this stage will
            //       NOT be accessible in agent/node directives. We must use
            //       Groovy variables defined before the pipeline definition.
            stage('Environment') {

                agent  { node { label 'master' } }

                steps {
                    script {
                        // Print all the variables
						sh "printenv"
                    }
                }
            }
			
			// Checkout stages.
            //
            stage('Checkout') {
                parallel {
                    stage('Checkout Linux') {
                        agent { node { label LINUX_BUILD_NODE } }
                        steps {
                            script {                        
                                externalFuncs.CheckoutSCM ()
                            }
                        }
                    } 
                    stage('Checkout Windows') {
                        agent { node { label WIN_BUILD_NODE } }
                        steps {
                            script {
                                echo "The step is started for Checkout Windows on Node: ${NODE_NAME}"
                                externalFuncs.CheckoutSCM ()								
                            }
                        }
                    }
               }
            }	 
			stage('Create') {				
				// No need to check out code again, since it was checked
				// out to a shared workspace in the Checkout stage.
				options { skipDefaultCheckout() }
				agent { node { label WIN_BUILD_NODE } }
				steps {
					script {
						
						echo "The step is started for WindowsPV_WS on Node: ${NODE_NAME}"
						
					}
				}
			}
			
			stage('Define Node Specs'){
				parallel  {
					stage('Lin_Node') {				
						// No need to check out code again, since it was checked
						// out to a shared workspace in the Checkout stage.
						options { skipDefaultCheckout() }
						agent { node { label LINUX_BUILD_NODE } }
						steps {
							script {
								
								echo "The step is started for Calculating Impacts on Node: ${NODE_NAME}"
								
							}
						}
					}
				    stage('Win_Node') {				
						// No need to check out code again, since it was checked
						// out to a shared workspace in the Checkout stage.
						options { skipDefaultCheckout() }
						agent { node { label WIN_BUILD_NODE } }
						steps {
							script {
								
								echo "The step is started for Calculating Impacts on Node: ${NODE_NAME}"
								
							}
						}
					}
				}
			}
			stage ('Validation') {
				parallel {
					stage ('Linux') {
					 agent { node { label "BuildLinux && ${env.ReleaseLevel}" } }
						stages {													
							stage('Set  Image') {				
								// No need to check out code again, since it was checked
								// out to a shared workspace in the Checkout stage.
								options { skipDefaultCheckout() }								
								steps {
									script {
										
										echo "The step is started for Calculating Impacts on Node: ${NODE_NAME}"
									}
								}
							}							
							stage ('Build') {
								// No need to check out code again, since it was checked
								// out to a shared workspace in the Checkout stage.
								options { skipDefaultCheckout() }								
								steps {
									script {										
										
										echo "The step is started for LinuxTests on Node: ${NODE_NAME}"
										
									}
								}
							}
							stage ('RTV') {
								// No need to check out code again, since it was checked
								// out to a shared workspace in the Checkout stage.
								options { skipDefaultCheckout() }								
								steps {
									script {										
										
										echo "The step is started for LinuxRTV on Node: ${NODE_NAME}"
										
									}
								}
							}
							stage('ODT') {
								// No need to check out code again, since it was checked
								// out to a shared workspace in the Checkout stage.
								options { skipDefaultCheckout() }
								steps {
									script {										
										
										echo "The step is started for LinuxODT on Node: ${NODE_NAME}"
										
									}
								}
							}
						}
					}
					stage ('Windows') {
						agent { node { label WIN_BUILD_NODE } }
						stages {							
							stage('Set PV_WS Image') {				
								// No need to check out code again, since it was checked
								// out to a shared workspace in the Checkout stage.
								options { skipDefaultCheckout() }												
								steps {
									script {
										
										echo "The step is started for WindowsPV_WS on Node: ${NODE_NAME}"
										
									}
								}
							}
							stage ('Build') {
								// No need to check out code again, since it was checked
								// out to a shared workspace in the Checkout stage.
								options { skipDefaultCheckout() }
								steps {
									script {

										echo "The step is started for WindowsTests on Node: ${NODE_NAME}"
										
									}
								}
							}
							stage ('RTV') {
								// No need to check out code again, since it was checked
								// out to a shared workspace in the Checkout stage.
								options { skipDefaultCheckout() }
								steps {
									script {
										
										echo "The step is started for WindowsRTV on Node: ${NODE_NAME}"
										
									}
								}
								
							}
							stage('ODT') {
								// No need to check out code again, since it was checked
								// out to a shared workspace in the Checkout stage.
								options { skipDefaultCheckout() }								
								steps {
									script {
										
										echo "The step is started for WindowsODT on Node: ${NODE_NAME}"
										
									}
								}
							}
						}
					}
				}
			}			
			 
			stage('Reset WindowsPV_WS') {							
				// No need to check out code again, since it was checked
				// out to a shared workspace in the Checkout stage.
				options { skipDefaultCheckout() }

				agent { node { label WIN_BUILD_NODE } }

					steps {
						script {
							
							// To fetch the Agent name of each stage declare Jenkins environment variable NODE_NAME
							echo "The step is started for Reset Windows PV_WS on Node: ${NODE_NAME}"
							
						}
					}
			}
			stage('Reset LinuxPV_WS') {							
				// No need to check out code again, since it was checked
				// out to a shared workspace in the Checkout stage.
				options { skipDefaultCheckout() }

				agent { node { label LINUX_BUILD_NODE } }

					steps {
						script {
							
							echo "The step is started for Reset Linux PV_WS on Node: ${NODE_NAME}"
							
						}
					}
			} 				
		
		}
		post {
			// Things that we want done regardless of pipeline's outcome
			//
			always {

				// Push the overall statistics from all the stages to InfluxDB
				//
				node (LINUX_BUILD_NODE){

					script{
						echo "Pipe Duration (millisec): ${currentBuild.duration}"
						echo "Pipe Duration (human):    ${currentBuild.durationString}"
						
						// Sending mail when build is failed due to DRC Status
						
														
							// The stripMargin method will trim the left (up to and including the | char) from each line
							def mailBody = """DRC Status Failed for BUILD_NUMBER:   ${BUILD_NUMBER}   in  JenkinsInstanceLab:   ${ENO_LAB_NAME}, REQUEST_WS:   ${REQUEST_WS}   does not respect rules set in PARENT_WS:  ${PARENT_WS}
							|${urlLink}""".stripMargin()
							
							emailext attachLog: true, body: mailBody, subject: mailSub, to: ''
						
					}
				}
			}
		}
	
	}
}
